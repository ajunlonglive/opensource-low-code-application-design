// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(StructureDBContext))]
    [Migration("20200606170841_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.DCAppCanonicalURL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DCAppStructureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppStructureId");

                    b.ToTable("DCAppCanonicalURL");
                });

            modelBuilder.Entity("Domain.Entities.DCAppCapability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CapabilityType")
                        .HasColumnType("int");

                    b.Property<Guid?>("DCAppControlActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppControlActionId");

                    b.HasIndex("DataId");

                    b.ToTable("DCAppCapability");
                });

            modelBuilder.Entity("Domain.Entities.DCAppControl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DCAppPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DataFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppPageId");

                    b.HasIndex("DataFieldId");

                    b.ToTable("DAppControls");
                });

            modelBuilder.Entity("Domain.Entities.DCAppControlAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DCAppControlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppControlId");

                    b.ToTable("DAppControlAction");
                });

            modelBuilder.Entity("Domain.Entities.DCAppControlProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DCAppControlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppControlId");

                    b.ToTable("DAppControlProperties");
                });

            modelBuilder.Entity("Domain.Entities.DCAppDataDefinitionBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowNullValue")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOnlyUniqueValue")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DCAppDataDefinitions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DCAppDataDefinitionBase");
                });

            modelBuilder.Entity("Domain.Entities.DCAppDataField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DCAppDataModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DCAppRolePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DataDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppDataModelId");

                    b.HasIndex("DCAppRolePermissionId");

                    b.HasIndex("DataDefinitionId");

                    b.ToTable("DAppDataFields");
                });

            modelBuilder.Entity("Domain.Entities.DCAppDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSingleRecord")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("DAppDataModels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DCAppDataModel");
                });

            modelBuilder.Entity("Domain.Entities.DCAppDataValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DataFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferenceRowIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DataFieldId");

                    b.HasIndex("Name");

                    b.ToTable("DAppDataValues");
                });

            modelBuilder.Entity("Domain.Entities.DCAppEntityRowReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DCAppEntityRowReferences");
                });

            modelBuilder.Entity("Domain.Entities.DCAppFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("DAppFeatures");
                });

            modelBuilder.Entity("Domain.Entities.DCAppGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("DAppGroups");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DCAppGroup");
                });

            modelBuilder.Entity("Domain.Entities.DCAppPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DCAppWorkFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppWorkFlowId");

                    b.HasIndex("Name");

                    b.ToTable("DAppPages");
                });

            modelBuilder.Entity("Domain.Entities.DCAppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Name");

                    b.ToTable("DAppRoles");
                });

            modelBuilder.Entity("Domain.Entities.DCAppRoleAccessGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSource")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParentUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentRoleId");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("DAppRoleAccessGroups");
                });

            modelBuilder.Entity("Domain.Entities.DCAppRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("DAppRolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.DCAppRoleRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DCAppRolePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChildRoleId");

                    b.HasIndex("DCAppRolePermissionId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("DAppRoleRules");
                });

            modelBuilder.Entity("Domain.Entities.DCAppStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExternalGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InternalGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalGroupId");

                    b.HasIndex("InternalGroupId");

                    b.HasIndex("Name");

                    b.ToTable("DAppStructures");
                });

            modelBuilder.Entity("Domain.Entities.DCAppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DCAppUser");
                });

            modelBuilder.Entity("Domain.Entities.DCAppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DCAppUserRoleRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DCAppUserRoleUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.HasIndex("DCAppUserRoleUserId", "DCAppUserRoleRoleId");

                    b.ToTable("DAppUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.DCAppWorkFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DCAppDataModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DCAppFeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSingleRecord")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DCAppFeatureId");

                    b.HasIndex("Name");

                    b.ToTable("DAppWorkFlows");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppDataChoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChoiceDisplayText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChoiceGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChoiceParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChoiceValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceParentId");

                    b.ToTable("DAppDataChoiceItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppBoolDataDefinition", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataDefinitionBase");

                    b.HasDiscriminator().HasValue("DCAppBoolDataDefinition");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppChoiceDataDefinition", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataDefinitionBase");

                    b.Property<bool>("AllowMultipleSelection")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("DCAppChoiceDataDefinition");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppDateTimeDataDefinition", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataDefinitionBase");

                    b.Property<string>("Format")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("DD/MMM/YY");

                    b.HasDiscriminator().HasValue("DCAppDateTimeDataDefinition");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppFileDataDefinition", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataDefinitionBase");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DCAppFileDataDefinition");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppNumberDataDefinition", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataDefinitionBase");

                    b.Property<short>("DecimalPlaces")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)2);

                    b.Property<bool>("HasDecimals")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("DCAppNumberDataDefinition");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppRefEntityDataDefinition", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataDefinitionBase");

                    b.Property<bool>("IsSingleRecord")
                        .HasColumnType("bit");

                    b.Property<Guid>("RefDataModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("DCAppRefEntityDataDefinition");
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppStringDataDefinition", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataDefinitionBase");

                    b.Property<string>("Format")
                        .HasColumnName("DCAppStringDataDefinition_Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMultiLine")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegularExpressionFormat")
                        .HasColumnType("bit");

                    b.Property<short>("Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)100);

                    b.HasDiscriminator().HasValue("DCAppStringDataDefinition");
                });

            modelBuilder.Entity("Domain.Entities.DCAppCapabilityDataModel", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppDataModel");

                    b.Property<Guid?>("DCAppGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DCAppGroupId");

                    b.HasDiscriminator().HasValue("DCAppCapabilityDataModel");
                });

            modelBuilder.Entity("Domain.Entities.DCAppExternalGroup", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppGroup");

                    b.HasDiscriminator().HasValue("DCAppExternalGroup");
                });

            modelBuilder.Entity("Domain.Entities.DCAppInternalGroup", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppGroup");

                    b.HasDiscriminator().HasValue("DCAppInternalGroup");
                });

            modelBuilder.Entity("Domain.Entities.DCAppExternalUser", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppUser");

                    b.Property<Guid?>("DCAppStructureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DCAppStructureId");

                    b.HasDiscriminator().HasValue("DCAppExternalUser");
                });

            modelBuilder.Entity("Domain.Entities.DCAppInternalUser", b =>
                {
                    b.HasBaseType("Domain.Entities.DCAppUser");

                    b.Property<Guid?>("DCAppStructureId")
                        .HasColumnName("DCAppInternalUser_DCAppStructureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DCAppStructureId");

                    b.HasDiscriminator().HasValue("DCAppInternalUser");
                });

            modelBuilder.Entity("Domain.Entities.DCAppCanonicalURL", b =>
                {
                    b.HasOne("Domain.Entities.DCAppStructure", null)
                        .WithMany("URLs")
                        .HasForeignKey("DCAppStructureId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppCapability", b =>
                {
                    b.HasOne("Domain.Entities.DCAppControlAction", null)
                        .WithMany("Capabilities")
                        .HasForeignKey("DCAppControlActionId");

                    b.HasOne("Domain.Entities.DCAppCapabilityDataModel", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppControl", b =>
                {
                    b.HasOne("Domain.Entities.DCAppPage", "DCAppPage")
                        .WithMany("Controls")
                        .HasForeignKey("DCAppPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DCAppDataField", "DataField")
                        .WithMany()
                        .HasForeignKey("DataFieldId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppControlAction", b =>
                {
                    b.HasOne("Domain.Entities.DCAppControl", null)
                        .WithMany("Actions")
                        .HasForeignKey("DCAppControlId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppControlProperty", b =>
                {
                    b.HasOne("Domain.Entities.DCAppControl", null)
                        .WithMany("Properties")
                        .HasForeignKey("DCAppControlId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppDataField", b =>
                {
                    b.HasOne("Domain.Entities.DCAppDataModel", "DCAppDataModel")
                        .WithMany("DataFields")
                        .HasForeignKey("DCAppDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DCAppRolePermission", null)
                        .WithMany("RestrictAccessFields")
                        .HasForeignKey("DCAppRolePermissionId");

                    b.HasOne("Domain.Entities.DCAppDataDefinitionBase", "DataDefinition")
                        .WithMany()
                        .HasForeignKey("DataDefinitionId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppDataModel", b =>
                {
                    b.HasOne("Domain.Entities.DCAppGroup", "Group")
                        .WithMany("DataModels")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppDataValue", b =>
                {
                    b.HasOne("Domain.Entities.DCAppDataField", "DataField")
                        .WithMany()
                        .HasForeignKey("DataFieldId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppFeature", b =>
                {
                    b.HasOne("Domain.Entities.DCAppGroup", "Group")
                        .WithMany("Features")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppGroup", b =>
                {
                    b.HasOne("Domain.Entities.DCAppGroup", "ParentGroup")
                        .WithMany("ChildGroups")
                        .HasForeignKey("ParentGroupId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppPage", b =>
                {
                    b.HasOne("Domain.Entities.DCAppWorkFlow", "DCAppWorkFlow")
                        .WithMany("Pages")
                        .HasForeignKey("DCAppWorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DCAppRole", b =>
                {
                    b.HasOne("Domain.Entities.DCAppGroup", "Group")
                        .WithMany("Roles")
                        .HasForeignKey("GroupId");

                    b.OwnsOne("Domain.ValueObjects.SystemRoleType", "SystemRole", b1 =>
                        {
                            b1.Property<Guid>("DCAppRoleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DCAppRoleId");

                            b1.ToTable("DAppRoles");

                            b1.WithOwner()
                                .HasForeignKey("DCAppRoleId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.DCAppRoleAccessGroup", b =>
                {
                    b.HasOne("Domain.Entities.DCAppRole", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.HasOne("Domain.Entities.DCAppUser", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.HasOne("Domain.Entities.DCAppWorkFlow", "WorkFlow")
                        .WithMany("AccessGroups")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DCAppRolePermission", b =>
                {
                    b.HasOne("Domain.Entities.DCAppWorkFlow", "WorkFlow")
                        .WithMany("RoleAccessPermissions")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.AccessLevelType", "AccessLevel", b1 =>
                        {
                            b1.Property<Guid>("DCAppRolePermissionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DCAppRolePermissionId");

                            b1.ToTable("DAppRolePermissions");

                            b1.WithOwner()
                                .HasForeignKey("DCAppRolePermissionId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.DCAppRoleRule", b =>
                {
                    b.HasOne("Domain.Entities.DCAppRole", "ChildRole")
                        .WithMany()
                        .HasForeignKey("ChildRoleId");

                    b.HasOne("Domain.Entities.DCAppRolePermission", null)
                        .WithMany("RoleRules")
                        .HasForeignKey("DCAppRolePermissionId");

                    b.HasOne("Domain.Entities.DCAppRole", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.OwnsOne("Domain.ValueObjects.RoleRuleType", "RuleType", b1 =>
                        {
                            b1.Property<Guid>("DCAppRoleRuleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DCAppRoleRuleId");

                            b1.ToTable("DAppRoleRules");

                            b1.WithOwner()
                                .HasForeignKey("DCAppRoleRuleId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.DCAppStructure", b =>
                {
                    b.HasOne("Domain.Entities.DCAppExternalGroup", "ExternalGroup")
                        .WithMany()
                        .HasForeignKey("ExternalGroupId");

                    b.HasOne("Domain.Entities.DCAppInternalGroup", "InternalGroup")
                        .WithMany()
                        .HasForeignKey("InternalGroupId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppUserRole", b =>
                {
                    b.HasOne("Domain.Entities.DCAppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DCAppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.HasOne("Domain.Entities.DCAppUserRole", null)
                        .WithMany("ReportsTo")
                        .HasForeignKey("DCAppUserRoleUserId", "DCAppUserRoleRoleId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppWorkFlow", b =>
                {
                    b.HasOne("Domain.Entities.DCAppFeature", "DCAppFeature")
                        .WithMany("WorkFlows")
                        .HasForeignKey("DCAppFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.DataRowAccessType", "RowAccessType", b1 =>
                        {
                            b1.Property<Guid>("DCAppWorkFlowId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DCAppWorkFlowId");

                            b1.ToTable("DAppWorkFlows");

                            b1.WithOwner()
                                .HasForeignKey("DCAppWorkFlowId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Data.DCAppDataChoiceItem", b =>
                {
                    b.HasOne("Domain.Entities.Data.DCAppChoiceDataDefinition", "ChoiceParent")
                        .WithMany("Choices")
                        .HasForeignKey("ChoiceParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.DCAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.DCAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DCAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.DCAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DCAppCapabilityDataModel", b =>
                {
                    b.HasOne("Domain.Entities.DCAppGroup", null)
                        .WithMany("CapabilityDataModels")
                        .HasForeignKey("DCAppGroupId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppExternalUser", b =>
                {
                    b.HasOne("Domain.Entities.DCAppStructure", null)
                        .WithMany("External")
                        .HasForeignKey("DCAppStructureId");
                });

            modelBuilder.Entity("Domain.Entities.DCAppInternalUser", b =>
                {
                    b.HasOne("Domain.Entities.DCAppStructure", null)
                        .WithMany("Internal")
                        .HasForeignKey("DCAppStructureId");
                });
#pragma warning restore 612, 618
        }
    }
}
