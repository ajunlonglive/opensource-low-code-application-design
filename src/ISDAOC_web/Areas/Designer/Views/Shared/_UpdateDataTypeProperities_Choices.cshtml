@model Presentation.ViewModels.DCAppDataTypeDefinition_ChoiceViewModel


@inject Presentation.Services.IDataModelService DataModelService;

@if (!string.IsNullOrEmpty(Model.DisplayMessage))
{
    <div class="alert alert-success" role="alert">
        @Model.DisplayMessage
    </div>
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @Model.ErrorMessage
    </div>
}

<form name="updateProperties">
    <input type="hidden" name="DataModelId" value="@Model.DataModelId" />
    <input type="hidden" name="DataFieldId" value="@Model.DataFieldId" />

    <div class="form-row">
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                <label>Allow null value: </label>
            </div>
        </div>
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                <ejs-checkbox id="AllowNullValue" name="AllowNullValue" checked="@Model.AllowNullValue"></ejs-checkbox>
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                <label>Allow multiple selection: </label>
            </div>
        </div>
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                <ejs-checkbox id="IsAllowMultipleSelection" name="IsAllowMultipleSelection"
                              checked="@Model.IsAllowMultipleSelection"></ejs-checkbox>
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                <label>Choices: </label>
            </div>
        </div>
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                <ejs-grid id="DataFieldsGrid" load="onLoad" allowPaging="true" allowSorting="true"
                          allowFiltering="true"
                          actionComplete="actionComplete"
                          toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Search" })"
                          query="new ej.data.Query().addParams('DataFieldId', '@Model.DataFieldId')">
                    <e-data-manager url="/Designer/DataModels/GetDataFieldChoices" adaptor="UrlAdaptor"
                                    insertUrl="/Designer/DataModels/CreateDataFieldChoice"
                                    updateUrl="/Designer/DataModels/UpdateDataFieldChoice"
                                    removeUrl="/Designer/DataModels/RemoveDataFieldChoice"></e-data-manager>
                    <e-grid-editSettings allowEditing="true" allowAdding="true" allowDeleting="true"
                                         mode="Dialog" template='#dialogtemplate'></e-grid-editSettings>
                    <e-grid-columns>
                        <e-grid-column field="Id" isIdentity="true" headerText="DataFieldID" visible="false" isPrimaryKey="true" textAlign="Right" width="120"></e-grid-column>
                        <e-grid-column field="ChoiceGroup" headerText="Choice Group" width="150"></e-grid-column>
                        <e-grid-column field="Name" headerText="Choice Value" width="150"></e-grid-column>
                    </e-grid-columns>
                </ejs-grid>
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                @*<button class="btn-primary" id="cancelButton" onclick='cancelButtonClick(); return false;'>Cancel</button>*@
            </div>
        </div>
        <div class="form-group col-md-4">
            <div class="e-float-input e-control-wrapper">
                <button class="btn-primary" id="saveButton" onclick='savePropertiesButtonClick("_Choices"); return false;'>Update</button>
            </div>
        </div>
    </div>
</form>

<script id='dialogtemplate' type="text/x-template">
    <div id="dialogTemp">
    </div>
</script>

<script>
    function onLoad() {
        var tokenValue = $("input[name=RequestVerificationToken]").val();
        this.dataSource.headers = [{ 'XSRF-TOKEN': tokenValue }];
    }

    function actionComplete(args) {
        if (args.requestType === 'beginEdit' || args.requestType === 'add') {
            var dialog = args.dialog;
            // change the header of the dialog
            dialog.width = 400;
            dialog.header = args.requestType === 'beginEdit' ? 'Update Choice-Item' : 'Add New Choice-Item';

            let spinner = ej.popups.createSpinner({ target: args.dialog.element });
            ej.popups.showSpinner(args.dialog.element);
            if (args.requestType === 'beginEdit') {
                var ajax = new ej.base.Ajax({
                    url: "/Designer/DataModels/DialogUpdateDataFieldChoice", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ value: args.rowData })
                });
                ajax.send().then(function (data) {
                    appendElement(data, args.form); //Render the edit form with selected record
                    args.form.elements.namedItem('Name').focus();
                    ej.popups.hideSpinner(args.dialog.element);
                }).catch(function (xhr) {
                    console.log(xhr);
                    ej.popups.hideSpinner(args.dialog.element);
                });
            }
            if (args.requestType === 'add') {
                var ajax = new ej.base.Ajax({
                    url: "/Designer/DataModels/DialogCreateDataFieldChoice", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ value: args.rowData })
                });
                ajax.send().then(function (data) {
                    appendElement(data, args.form); //Render the edit form with selected record
                    args.form.elements.namedItem('Name').focus();
                    ej.popups.hideSpinner(args.dialog.element);
                }).catch(function (xhr) {
                    console.log(xhr);
                    ej.popups.hideSpinner(args.dialog.element);
                });
            }

            @*var grid = document.getElementById("DataFieldsGrid").ej2_instances[0];
            grid.query = new ej.data.Query();
            grid.query.addParams('DataModelId', '@Model.DataModelId');
            grid.query.addParams('StructureId', '@Model.StructureId');

            var tokenValue = $("input[name=RequestVerificationToken]").val();
            this.dataSource.dataSource.headers = [{ 'XSRF-TOKEN': tokenValue }];*@

            }
    }

    function appendElement(elementString, form) {
        form.querySelector("#dialogTemp").innerHTML = elementString;
        var script = document.createElement('script');
        script.type = "text/javascript";
        var serverScript = form.querySelector("#dialogTemp").querySelector('script');
        script.textContent = serverScript.innerHTML;
        document.head.appendChild(script);
        serverScript.remove();
    }
</script>
<ejs-scripts></ejs-scripts>
