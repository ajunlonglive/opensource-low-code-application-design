@model Presentation.ViewModels.DCAppDataFieldViewModel
@inject Presentation.Services.IDataModelService DataModelService;
@inject Presentation.Services.IDataDefinitionService DataDefinitionService;

<div class="form-row">
    <div class="form-group col-md-4">
        <div class="e-float-input e-control-wrapper">
            <button class="btn-primary" id="manageTables" onclick='manageTablessButtonButtonClick(); return false;'>Go to Data-Table</button>
        </div>
    </div>
    <div class="form-group col-md-4">
        <div class="e-float-input e-control-wrapper">
            <ejs-dropdownlist id="SelectedDataFieldDropDown" value="@Model.Id" change="dataFieldDropdownListSelectionChange"
                              dataSource="@DataModelService.GetDataFieldListAsSelectListItems(Model.DataModelId.ToString())"
                              placeholder="Selected Data-Field:"
                              floatLabelType="Always" popupHeight="300px">
                <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
            </ejs-dropdownlist>
        </div>
    </div>
</div>

<h4>Data-Field: @Model.Name</h4>
<h5>Data-Type: @Model.DataType</h5>
<h6>Description: @Model.Description</h6>

<div class="e-wrapper-container">

    @Html.HiddenFor(x => x.DataModelId)

    <div id="Data-Properties">

    </div>
    <hr />
</div>



<script>
    $(function () {
    var configureFieldsUrl = '/Designer/DataModels/GetDataPropertiesData';
        $('#Data-Properties').load(configureFieldsUrl, { 'DataFieldId':'@Model.Id'});
    });

        function actionComplete(args) {
        if (args.requestType === 'beginEdit' || args.requestType === 'add') {
            var dialog = args.dialog;
            // change the header of the dialog
            dialog.width = 400;
            dialog.header = args.requestType === 'beginEdit' ? 'Update Data-Field' : 'Add New Data-Field';

                let spinner = ej.popups.createSpinner({ target: args.dialog.element });
                ej.popups.showSpinner(args.dialog.element);
                if (args.requestType === 'beginEdit') {
                    var ajax = new ej.base.Ajax({
                        url: "/Designer/DataModels/DialogUpdateDataField", //render the partial view
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ value: args.rowData })
                    });
                    ajax.send().then(function (data) {
                        appendElement(data, args.form); //Render the edit form with selected record
                        args.form.elements.namedItem('Name').focus();
                        ej.popups.hideSpinner(args.dialog.element);
                    }).catch(function (xhr) {
                        console.log(xhr);
                        ej.popups.hideSpinner(args.dialog.element);
                    });
                }
                if (args.requestType === 'add') {
                    var ajax = new ej.base.Ajax({
                        url: "/Designer/DataModels/DialogCreateDataField", //render the partial view
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ value: args.rowData })
                    });
                    ajax.send().then(function (data) {
                        appendElement(data, args.form); //Render the edit form with selected record
                        args.form.elements.namedItem('Name').focus();
                        ej.popups.hideSpinner(args.dialog.element);
                    }).catch(function (xhr) {
                        console.log(xhr);
                        ej.popups.hideSpinner(args.dialog.element);
                    });
            }

            @*var grid = document.getElementById("DataFieldsGrid").ej2_instances[0];
            grid.query = new ej.data.Query();
            grid.query.addParams('DataModelId', '@Model.DataModelId');
            grid.query.addParams('StructureId', '@Model.StructureId');

            var tokenValue = $("input[name=RequestVerificationToken]").val();
            this.dataSource.dataSource.headers = [{ 'XSRF-TOKEN': tokenValue }];*@

            }
        }

        function appendElement(elementString, form) {
            form.querySelector("#dialogTemp").innerHTML = elementString;
            var script = document.createElement('script');
            script.type = "text/javascript";
            var serverScript = form.querySelector("#dialogTemp").querySelector('script');
            script.textContent = serverScript.innerHTML;
            document.head.appendChild(script);
            serverScript.remove();
    }

    function dataFieldDropdownListSelectionChange() {
        var selectedDataField = document.getElementById('SelectedDataFieldDropDown').ej2_instances[0];
        $.ajax({
            type: 'POST',
            url: '/Designer/DataModels/GetDataFieldData',
            dataType: 'html',
            contentType: 'application/json',
            data: JSON.stringify({ "NodeId": selectedDataField.value }),
            error: function (result) {
                console.log("Data Models load error");
                //console.log(result.statusText);
                $("#main-content").html(result.responseText);
            },
            success: function (result) {
                console.log("success");
                //console.log(result);
                $("#main-content").html(result);

                 var configureFieldsUrl = '/Designer/DataModels/GetDataPropertiesData';
                 $('#Data-Properties').load(configureFieldsUrl, { 'DataFieldId':'@Model.Id'});

            }
        });

    }

    function manageTablessButtonButtonClick(){
        $.ajax({
            type: 'POST',
            url: '/Designer/DataModels/GetDataModelData',
            dataType: 'html',
            contentType: 'application/json',
            data: JSON.stringify({ "NodeId": '@Model.DataModelId' }),
            error: function (result) {
                console.log("Data Models load error");
                //console.log(result.statusText);
                $("#main-content").html(result.responseText);
            },
            success: function (result) {
                console.log("success");
                //console.log(result);
                $("#main-content").html(result);
            }
        });
    }

    function savePropertiesButtonClick(str) {
        let form = document.forms["updateProperties"];
        let fd = new FormData(form);
        let data = {};

        for (let [key, prop] of fd) {
            console.log(prop);
            if (prop == "on") {
                prop = "true";
            }
            else if (prop == "off") {
                prop = "false";
            }
            data[key] = prop;
        }

        console.log(JSON.stringify(data));

        $.ajax({
            type: 'POST',
            url: '/Designer/DataModels/UpdatePropertiesData'+str,
            dataType: 'html',
            contentType: 'application/json',
            data: JSON.stringify(data),
            error: function (result) {
                console.log("Data Models load error");
                //console.log(result.statusText);
                $("#Data-Properties").html(result.responseText);
            },
            success: function (result) {
                console.log("success");
                //console.log(result);
                $("#Data-Properties").html(result);
            }
        });
    }


</script>
<ejs-scripts></ejs-scripts>
